{"version":3,"file":"preload.bundle.js","mappings":";;;;;;;;;;AAAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;ACtBA;AACA;;AAGA;AACA,MAAM;EAAEA,aAAa;EAAEC;AAAY,CAAC,GAAGC,mBAAO,CAAC,0BAAU,CAAC;;AAE1D;AACAF,aAAa,CAACG,iBAAiB,CAAC,aAAa,EAAE;EAC7CC,WAAW,EAAGC,OAAO,IAAKJ,WAAW,CAACK,IAAI,CAAC,uBAAuB,EAAED,OAAO,CAAC;EAC5EE,SAAS,EAAGC,QAAQ,IAAKP,WAAW,CAACQ,EAAE,CAAC,mBAAmB,EAAED,QAAQ;AACvE,CAAC,CAAC,C","sources":["webpack://bibliotechclient/external node-commonjs \"electron\"","webpack://bibliotechclient/webpack/bootstrap","webpack://bibliotechclient/./src/preload.js"],"sourcesContent":["module.exports = require(\"electron\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// See the Electron documentation for details on how to use preload scripts:\n// https://www.electronjs.org/docs/latest/tutorial/process-model#preload-scripts\n\n\n// preload.js\nconst { contextBridge, ipcRenderer } = require('electron');\n\n// Expose a limited API to the renderer process\ncontextBridge.exposeInMainWorld('electronAPI', {\n  sendMessage: (message) => ipcRenderer.send('message-from-renderer', message),\n  onMessage: (callback) => ipcRenderer.on('message-from-main', callback),\n});"],"names":["contextBridge","ipcRenderer","require","exposeInMainWorld","sendMessage","message","send","onMessage","callback","on"],"sourceRoot":""}